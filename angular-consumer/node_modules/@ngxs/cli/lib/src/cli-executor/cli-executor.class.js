"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgxsCliExecutor = void 0;
var cli_executor_config_1 = require("./cli-executor.config");
var safe_1 = require("colors/safe");
var path_1 = require("path");
var command_line_class_1 = require("../command-line-parser/command-line.class");
var NgxsCliExecutor = /** @class */ (function () {
    function NgxsCliExecutor() {
    }
    /**
     * @description - entry point for execute cli
     * @param argv {ArgvTable}
     */
    NgxsCliExecutor.run = function (argv) {
        var _this = this;
        var name = argv.name, plopfile = argv.plopfile;
        var usageCustomPlopFile = !!plopfile;
        var usageCliWithoutPrompt = !!name;
        if (usageCustomPlopFile) {
            this.execPlop([plopfile]);
        }
        else if (usageCliWithoutPrompt) {
            this.execNodePlop(argv).then(function (result) { return _this.showOutput(result); });
        }
        else {
            this.execPlop([__dirname, cli_executor_config_1.DEFAULT_CONFIG]);
        }
    };
    /**
     * @description run cli with prompt
     * @param pathToPlopfile {string[]} - path relative to the command being run
     * @example: ['./my-plop/plopfile.js']
     */
    NgxsCliExecutor.execPlop = function (pathToPlopfile) {
        command_line_class_1.CommandLine.setArgument('--plopfile', path_1.resolve.apply(void 0, pathToPlopfile));
        require('plop');
    };
    /**
     * @description silent runnable cli (without prompt)
     * @param argv {ArgvTable}
     */
    NgxsCliExecutor.execNodePlop = function (argv) {
        return __awaiter(this, void 0, void 0, function () {
            var nodePlop, spec, plopPath, plop, generator, shouldBeGenerateSpec, cliArgv;
            return __generator(this, function (_a) {
                nodePlop = require('node-plop');
                spec = argv.spec;
                plopPath = path_1.resolve.apply(void 0, [__dirname, cli_executor_config_1.DEFAULT_CONFIG]);
                plop = nodePlop(plopPath);
                generator = plop.getGenerator(cli_executor_config_1.PLOP_GENERATOR_NAME);
                shouldBeGenerateSpec = spec ? JSON.parse(spec) : cli_executor_config_1.DEFAULT_USAGE_SPEC;
                cliArgv = __assign(__assign({ directory: '.' }, argv), { spec: shouldBeGenerateSpec });
                return [2 /*return*/, generator.runActions(cliArgv)];
            });
        });
    };
    /**
     * @description - custom output information
     * @param changes {Changes}
     * @param failures {Failures}
     */
    NgxsCliExecutor.showOutput = function (_a) {
        var changes = _a.changes, failures = _a.failures;
        changes.forEach(function (item) { return console.log((0, safe_1.green)('[SUCCESS]'), item.type, item.path); });
        failures.forEach(function (item) { return console.log((0, safe_1.red)('[FAILED]'), item.type, item.error); });
    };
    return NgxsCliExecutor;
}());
exports.NgxsCliExecutor = NgxsCliExecutor;
//# sourceMappingURL=cli-executor.class.js.map