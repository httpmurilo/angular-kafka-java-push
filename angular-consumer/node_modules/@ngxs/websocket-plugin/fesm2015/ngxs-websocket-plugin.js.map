{"version":3,"file":"ngxs-websocket-plugin.js","sources":["../../../packages/websocket-plugin/src/symbols.ts","../../../packages/websocket-plugin/src/websocket-handler.ts","../../../packages/websocket-plugin/src/websocket.module.ts","../../../packages/websocket-plugin/index.ts","../../../packages/websocket-plugin/ngxs-websocket-plugin.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const NGXS_WEBSOCKET_OPTIONS = new InjectionToken('NGXS_WEBSOCKET_OPTIONS');\n\nexport interface NgxsWebsocketPluginOptions {\n  /**\n   * URL of the websocket.\n   */\n  url?: string;\n\n  /**\n   * Either a single protocol string or an array of protocol strings.\n   * These strings are used to indicate sub-protocols, so that a single server\n   * can implement multiple WebSocket sub-protocols (for example, you might want one server to be able\n   * to handle different types of interactions depending on the specified protocol).\n   * If you don't specify a protocol string, an empty string is assumed.\n   */\n  protocol?: string | string[];\n\n  /**\n   * Sets the `binaryType` property of the underlying WebSocket.\n   */\n  binaryType?: 'blob' | 'arraybuffer';\n\n  /**\n   * The property name to distigunish this type for the store.\n   * Default: 'type'\n   */\n  typeKey?: string;\n\n  /**\n   * Interval to try and reconnect.\n   * Default: 5000\n   */\n  reconnectInterval?: number;\n\n  /**\n   * Number of reconnect attemps.\n   * Default: 10\n   */\n  reconnectAttempts?: number;\n\n  /**\n   * Serializer to call before sending messages\n   * Default: `json.stringify`\n   */\n  serializer?: (data: any) => string;\n\n  /**\n   * Deseralizer before publishing the message.\n   */\n  deserializer?: (e: MessageEvent) => any;\n}\n\nexport function noop(..._args: any[]) {\n  return function () {};\n}\n\n/**\n * Action to connect to the websocket. Optionally pass a URL.\n */\nexport class ConnectWebSocket {\n  static readonly type = '[WebSocket] Connect';\n\n  constructor(public payload?: NgxsWebsocketPluginOptions) {}\n}\n\n/**\n * Action triggered when a error ocurrs\n */\nexport class WebsocketMessageError {\n  static readonly type = '[WebSocket] Message Error';\n\n  constructor(public payload: any) {}\n}\n\n/**\n * Action to disconnect the websocket.\n */\nexport class DisconnectWebSocket {\n  static readonly type = '[WebSocket] Disconnect';\n}\n\n/**\n * Action triggered when websocket is connected\n */\nexport class WebSocketConnected {\n  static readonly type = '[WebSocket] Connected';\n}\n\n/**\n * Action triggered when websocket is disconnected\n */\nexport class WebSocketDisconnected {\n  static readonly type = '[WebSocket] Disconnected';\n}\n\n/**\n * Action to send to the server.\n */\nexport class SendWebSocketMessage {\n  static readonly type = '[WebSocket] Send Message';\n\n  constructor(public payload: any) {}\n}\n\n/**\n * Action dispatched when the user tries to connect if the connection already exists.\n */\nexport class WebSocketConnectionUpdated {\n  static readonly type = '[WebSocket] Connection Updated';\n}\n\n/**\n * This error is thrown where there is no `type` (or custom `typeKey`) property\n * on the message that came from the server side socket\n */\nexport class TypeKeyPropertyMissingError extends Error {\n  constructor(typeKey: string) {\n    super(`Property ${typeKey} is missing on the socket message`);\n  }\n}\n","import { Injectable, Inject, OnDestroy } from '@angular/core';\nimport { Actions, Store, getValue, ofActionDispatched } from '@ngxs/store';\nimport { Subscription } from 'rxjs';\n\nimport { WebSocketSubject, WebSocketSubjectConfig } from 'rxjs/webSocket';\n\nimport {\n  ConnectWebSocket,\n  DisconnectWebSocket,\n  SendWebSocketMessage,\n  NGXS_WEBSOCKET_OPTIONS,\n  NgxsWebsocketPluginOptions,\n  WebsocketMessageError,\n  WebSocketDisconnected,\n  TypeKeyPropertyMissingError,\n  WebSocketConnectionUpdated,\n  WebSocketConnected\n} from './symbols';\n\n@Injectable()\nexport class WebSocketHandler implements OnDestroy {\n  private socket: WebSocketSubject<any> | null = null;\n\n  private config: WebSocketSubjectConfig<any> = {\n    url: this.options.url!,\n    protocol: this.options.protocol,\n    // Default binary type is `blob` for the global `WebSocket`\n    binaryType: this.options.binaryType,\n    serializer: this.options.serializer,\n    deserializer: this.options.deserializer,\n    closeObserver: {\n      next: () => {\n        // ATTENTION!\n        // See https://github.com/ReactiveX/rxjs/blob/master/src/internal/observable/dom/WebSocketSubject.ts#L340\n        // RxJS socket emits `onComplete` event only if `event.wasClean` is truthy\n        // and doesn't complete socket subject if it's falsy\n        this.disconnect();\n      }\n    },\n    openObserver: {\n      next: () => this.store.dispatch(new WebSocketConnected())\n    }\n  };\n\n  private typeKey = this.options.typeKey!;\n\n  private subscription = new Subscription();\n\n  constructor(\n    private store: Store,\n    private actions$: Actions,\n    @Inject(NGXS_WEBSOCKET_OPTIONS) private options: NgxsWebsocketPluginOptions\n  ) {\n    this.setupActionsListeners();\n  }\n\n  ngOnDestroy(): void {\n    this.closeConnection();\n    this.subscription.unsubscribe();\n  }\n\n  private setupActionsListeners(): void {\n    this.subscription.add(\n      this.actions$.pipe(ofActionDispatched(ConnectWebSocket)).subscribe(({ payload }) => {\n        this.connect(payload);\n      })\n    );\n\n    this.subscription.add(\n      this.actions$.pipe(ofActionDispatched(DisconnectWebSocket)).subscribe(() => {\n        this.disconnect();\n      })\n    );\n\n    this.subscription.add(\n      this.actions$.pipe(ofActionDispatched(SendWebSocketMessage)).subscribe(({ payload }) => {\n        this.send(payload);\n      })\n    );\n  }\n\n  private connect(options?: NgxsWebsocketPluginOptions): void {\n    this.updateConnection();\n\n    // Users can pass the options in the connect method so\n    // if options aren't available at DI bootstrap they have access\n    // to pass them here\n    if (options) {\n      this.mergeConfigWithOptions(options);\n    }\n\n    this.socket = new WebSocketSubject(this.config);\n\n    this.socket.subscribe({\n      next: (message: any) => {\n        const type = getValue(message, this.typeKey);\n        if (!type) {\n          throw new TypeKeyPropertyMissingError(this.typeKey);\n        }\n        this.store.dispatch({ ...message, type });\n      },\n      error: (error: any) => {\n        if (error instanceof CloseEvent) {\n          this.dispatchWebSocketDisconnected();\n        } else {\n          this.store.dispatch(new WebsocketMessageError(error));\n        }\n      }\n    });\n  }\n\n  private disconnect(): void {\n    if (this.socket) {\n      this.closeConnection();\n      this.dispatchWebSocketDisconnected();\n    }\n  }\n\n  private send(data: any): void {\n    if (!this.socket) {\n      throw new Error('You must connect to the socket before sending any data');\n    }\n\n    this.socket.next(data);\n  }\n\n  /**\n   * Don't enlarge the `connect` method\n   */\n  private mergeConfigWithOptions(options: NgxsWebsocketPluginOptions): void {\n    if (options.url) {\n      this.config.url = options.url;\n    }\n\n    if (options.serializer) {\n      this.config.serializer = options.serializer;\n    }\n\n    if (options.deserializer) {\n      this.config.deserializer = options.deserializer;\n    }\n  }\n\n  /**\n   * To ensure we don't have any memory leaks\n   * e.g. if the user occasionally dispatched `ConnectWebSocket` twice\n   * then the previous subscription will still live in the memory\n   * to prevent such behavior - we close the previous connection if it exists\n   */\n  private updateConnection(): void {\n    if (this.socket) {\n      this.closeConnection();\n      this.store.dispatch(new WebSocketConnectionUpdated());\n    }\n  }\n\n  /**\n   * Used in many places so it's better to move the code into function\n   */\n  private dispatchWebSocketDisconnected(): void {\n    this.store.dispatch(new WebSocketDisconnected());\n  }\n\n  private closeConnection(): void {\n    // `socket.complete()` closes the connection\n    // also it doesn't invoke the `onComplete` callback that we passed\n    // into `socket.subscribe(...)`\n    if (this.socket !== null) {\n      this.socket.complete();\n      this.socket = null;\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, APP_INITIALIZER, InjectionToken } from '@angular/core';\n\nimport { WebSocketHandler } from './websocket-handler';\nimport { NgxsWebsocketPluginOptions, NGXS_WEBSOCKET_OPTIONS, noop } from './symbols';\n\nexport function websocketOptionsFactory(options: NgxsWebsocketPluginOptions) {\n  return {\n    reconnectInterval: 5000,\n    reconnectAttempts: 10,\n    typeKey: 'type',\n    deserializer(e: MessageEvent) {\n      return JSON.parse(e.data);\n    },\n    serializer(value: any) {\n      return JSON.stringify(value);\n    },\n    ...options\n  };\n}\n\nexport const USER_OPTIONS = new InjectionToken('USER_OPTIONS');\n\n@NgModule()\nexport class NgxsWebsocketPluginModule {\n  static forRoot(\n    options?: NgxsWebsocketPluginOptions\n  ): ModuleWithProviders<NgxsWebsocketPluginModule> {\n    return {\n      ngModule: NgxsWebsocketPluginModule,\n      providers: [\n        WebSocketHandler,\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_WEBSOCKET_OPTIONS,\n          useFactory: websocketOptionsFactory,\n          deps: [USER_OPTIONS]\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: noop,\n          deps: [WebSocketHandler],\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","/**\n * The public api for consumers of @ngxs/websocket-plugin\n */\nexport * from './src/public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}